œ
qC:\Users\hw72786\Source\Repos\OverWatcher\OverWatcher\OverWatcher.Common.TaskScheduler\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 3
)3 4
]4 5
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 5
)5 6
]6 7
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *õR
bC:\Users\hw72786\Source\Repos\OverWatcher\OverWatcher\OverWatcher.Common.TaskScheduler\Schedule.cs
	namespace 	
OverWatcher
 
. 
Common 
. 
	Scheduler &
{ 
enum 
	Frequency	 
{		 
NONE

 
,

 
REPEATLY

 
,

 
MINUTELY

  
,

  !
HOURLY

" (
,

( )
DAILY

* /
,

/ 0
MONTHLY

1 8
} 
enum 
Skip	 
{ 
	DAYOFWEEK 
} 
public 

class 
Schedule 
{ 
private 
	Frequency 
freq 
; 
private 
Skip 
skip 
; 
private 
System 
. 
DateTime 
frequencyValue  .
;. /
private 
List 
< 
System 
. 
DateTime $
>$ %
	skipValue& /
;/ 0
public 
DateTime 
NextRun 
{  !
get" %
;% &
set' *
;* +
}, -
public 
bool 
isOnTime 
( 
System #
.# $
DateTime$ ,
dt- /
)/ 0
{ 	
if 
( 
isSkip 
( 
dt 
) 
|| 
dt  
<! "
NextRun# *
)* +
return, 2
false3 8
;8 9
CalculateNextTime 
( 
) 
;  
CalculateNextSkip 
( 
) 
;  
return 
true 
; 
} 	
public 
bool 
isSingleRun 
(  
)  !
{   	
return!! 
freq!! 
==!! 
	Frequency!! $
.!!$ %
NONE!!% )
?!!* +
true!!, 0
:!!1 2
false!!3 8
;!!8 9
}"" 	
public## 
Schedule## 
(## 
string## 
	frequency## (
,##( )
string##* 0
frequencyValue##1 ?
,##? @
string$$0 6
skip$$7 ;
,$$; <
string$$= C
	skipValue$$D M
)$$M N
{%% 	
this&& 
.&& 
	skipValue&& 
=&& 
new&&  
List&&! %
<&&% &
System&&& ,
.&&, -
DateTime&&- 5
>&&5 6
(&&6 7
)&&7 8
;&&8 9
try'' 
{(( 
freq)) 
=)) 
()) 
	Frequency)) !
)))! "
Enum))" &
.))& '
Parse))' ,
()), -
typeof))- 3
())3 4
	Frequency))4 =
)))= >
,))> ?
	frequency))@ I
.))I J
ToUpper))J Q
())Q R
)))R S
)))S T
;))T U
this** 
.** 
skip** 
=** 
(** 
Skip** !
)**! "
Enum**" &
.**& '
Parse**' ,
(**, -
typeof**- 3
(**3 4
Skip**4 8
)**8 9
,**9 :
skip**; ?
.**? @
ToUpper**@ G
(**G H
)**H I
)**I J
;**J K
CalculateSkip++ 
(++ 
	skipValue++ '
)++' (
;++( )
this,, 
.,, 
frequencyValue,, #
=,,$ %$
ParseAmbiguousDateString,,& >
(,,> ?
frequencyValue,,? M
),,M N
;,,N O
NextRun-- 
=-- 
DateTimeHelper-- (
.--( )
ZoneNow--) 0
;--0 1
}.. 
catch// 
(// 
	Exception// 
ex// 
)// 
{00 
Logger11 
.11 
Warn11 
(11 
ex11 
.11 
Message11 &
+11' (
$str11) >
)11> ?
;11? @
}22 
}33 	
private55 
bool55 
isSkip55 
(55 
System55 "
.55" #
DateTime55# +
dt55, .
)55. /
{66 	
if77 
(77 
this77 
.77 
skip77 
==77 
Skip77 !
.77! "
	DAYOFWEEK77" +
)77+ ,
{88 
return99 
	skipValue99  
.99  !
Any99! $
(99$ %
s99% &
=>99' )
s99* +
.99+ ,
	DayOfWeek99, 5
==996 8
dt999 ;
.99; <
	DayOfWeek99< E
)99E F
;99F G
}:: 
return;; 
false;; 
;;; 
}<< 	
private== 
void== 
CalculateNextSkip== &
(==& '
)==' (
{>> 	
}@@ 	
privateAA 
voidAA 
CalculateSkipAA "
(AA" #
stringAA# )
	skipValueAA* 3
)AA3 4
{BB 	
ifCC 
(CC 
thisCC 
.CC 
skipCC 
==CC 
SkipCC !
.CC! "
	DAYOFWEEKCC" +
)CC+ ,
{DD 
thisEE 
.EE 
	skipValueEE 
=EE  
	skipValueEE! *
.FF 
SplitFF 
(FF 
newFF 
charFF #
[FF# $
]FF$ %
{FF& '
$charFF( +
}FF, -
,FF- .
StringSplitOptionsFF/ A
.FFA B
RemoveEmptyEntriesFFB T
)FFT U
.GG 
SelectGG 
(GG 
sGG 
=>GG  
DateTimeGG! )
.GG) *
MinValueGG* 2
.GG2 3
AddDaysGG3 :
(GG: ;
(GG; <
intGG< ?
)GG? @
ParseDayofweekGG@ N
(GGN O
sGGO P
)GGP Q
+GGR S
$numGGT U
)GGU V
)GGV W
.GGW X
ToListGGX ^
(GG^ _
)GG_ `
;GG` a
}HH 
}JJ 	
privateLL 
voidLL 
CalculateNextTimeLL &
(LL& '
)LL' (
{MM 	
ifNN 
(NN 
freqNN 
==NN 
	FrequencyNN !
.NN! "
REPEATLYNN" *
)NN* +
{OO 
NextRunPP 
=PP 
NextRunPP !
.PP! "
AddMillisecondsPP" 1
(PP1 2
frequencyValuePP2 @
.PP@ A
SubtractPPA I
(PPI J
DateTimePPJ R
.PPR S
MinValuePPS [
)PP[ \
.PP\ ]
TotalMillisecondsPP] n
)PPn o
;PPo p
}QQ 
whileRR 
(RR 
isSkipRR 
(RR 
NextRunRR  
)RR  !
)RR! "
{SS 
ifTT 
(TT 
thisTT 
.TT 
skipTT 
==TT  
SkipTT! %
.TT% &
	DAYOFWEEKTT& /
)TT/ 0
{UU 
NextRunVV 
=VV 
NextRunVV %
.VV% &
AddDaysVV& -
(VV- .
$numVV. /
)VV/ 0
;VV0 1
}WW 
}XX 
}YY 	
private[[ 
DateTime[[ $
ParseAmbiguousDateString[[ 1
([[1 2
string[[2 8
date[[9 =
)[[= >
{\\ 	
try]] 
{^^ 
date__ 
=__ 
date__ 
.__ 
Replace__ #
(__# $
$str__$ *
,__* +
$str__, 2
)__2 3
;__3 4
date`` 
=`` 
date`` 
.`` 
Replace`` #
(``# $
$str``$ (
,``( )
$str``* .
)``. /
;``/ 0
dateaa 
=aa 
dateaa 
.aa 
Replaceaa #
(aa# $
$straa$ (
,aa( )
$straa* .
)aa. /
;aa/ 0
datebb 
=bb 
datebb 
.bb 
Replacebb #
(bb# $
$strbb$ (
,bb( )
$strbb* .
)bb. /
;bb/ 0
datecc 
=cc 
datecc 
.cc 
Replacecc #
(cc# $
$strcc$ (
,cc( )
$strcc* .
)cc. /
;cc/ 0
datedd 
=dd 
datedd 
.dd 
Replacedd #
(dd# $
$strdd$ (
,dd( )
$strdd* .
)dd. /
;dd/ 0
dateee 
=ee 
dateee 
.ee 
Replaceee #
(ee# $
$stree$ )
,ee) *
$stree+ 0
)ee0 1
;ee1 2
returnff 
Systemff 
.ff 
DateTimeff &
.ff& '

ParseExactff' 1
(ff1 2
dateff2 6
,ff6 7
$strff8 Q
,ffQ R
SystemffS Y
.ffY Z
GlobalizationffZ g
.ffg h
CultureInfoffh s
.ffs t
InvariantCulture	fft „
)
ff„ …
;
ff… †
}gg 
catchhh 
(hh 
	Exceptionhh 
exhh 
)hh 
{ii 
throwjj 
newjj 
ArgumentExceptionjj +
(jj+ ,
$strjj, V
+jjW X
exjjY [
.jj[ \
Messagejj\ c
)jjc d
;jjd e
}kk 
}mm 	
privatenn 
	DayOfWeeknn 
ParseDayofweeknn (
(nn( )
stringnn) /
downn0 3
)nn3 4
{oo 	
foreachpp 
(pp 
	DayOfWeekpp 
dpp 
inpp  "
Enumpp# '
.pp' (
	GetValuespp( 1
(pp1 2
typeofpp2 8
(pp8 9
	DayOfWeekpp9 B
)ppB C
)ppC D
)ppD E
{qq 
ifrr 
(rr 
drr 
.rr 
ToStringrr 
(rr 
)rr 
.rr  
	Substringrr  )
(rr) *
$numrr* +
,rr+ ,
$numrr- .
)rr. /
==rr0 2
dowrr3 6
)rr6 7
{ss 
returntt 
dtt 
;tt 
}uu 
}vv 
throwww 
newww 
ArgumentExceptionww '
(ww' (
$strww( K
)wwK L
;wwL M
}xx 	
}yy 
}zz é(
gC:\Users\hw72786\Source\Repos\OverWatcher\OverWatcher\OverWatcher.Common.TaskScheduler\TaskScheduler.cs
	namespace 	
OverWatcher
 
. 
Common 
. 
	Scheduler &
{ 
public 

class 
TaskScheduler 
{		 
System

 
.

 
Timers

 
.

 
Timer

 
timer

 !
;

! "
public 
delegate 
void 
TaskDelegate )
() *
)* +
;+ ,
private 

Dictionary 
< 
TaskDelegate '
,' (
Schedule) 1
>1 2
task3 7
;7 8
public 
TaskScheduler 
( 
int  
interval! )
)) *
{ 	
timer 
= 
new 
System 
. 
Timers %
.% &
Timer& +
(+ ,
interval, 4
)4 5
;5 6
task 
= 
new 

Dictionary !
<! "
TaskDelegate" .
,. /
Schedule0 8
>8 9
(9 :
): ;
;; <
} 	
public 
void 
Start 
( 
) 
{ 	
ElapsedEventHandler 
handler  '
=( )
new* -
ElapsedEventHandler. A
(A B
TaskEventHandlerB R
)R S
;S T
timer 
. 
Elapsed 
+= 
handler $
;$ %
timer 
. 
Start 
( 
) 
; 
handler 
. 
BeginInvoke 
(  
this  $
,$ %
null& *
,* +
new, /
AsyncCallback0 =
(= >!
Timer_ElapsedCallback> S
)S T
,T U
handlerV ]
)] ^
;^ _
} 	
private 
void !
Timer_ElapsedCallback *
(* +
IAsyncResult+ 7
result8 >
)> ?
{ 	
ElapsedEventHandler 
handler  '
=( )
result* 0
.0 1

AsyncState1 ;
as< >
ElapsedEventHandler? R
;R S
if 
( 
handler 
!= 
null 
)  
{ 
handler 
. 
	EndInvoke !
(! "
result" (
)( )
;) *
} 
}   	
private"" 
void"" 
TaskEventHandler"" %
(""% &
object""& ,
sender""- 3
,""3 4
ElapsedEventArgs""5 E
e""F G
)""G H
{## 	
foreach$$ 
($$ 
KeyValuePair$$ !
<$$! "
TaskDelegate$$" .
,$$. /
Schedule$$0 8
>$$8 9
pair$$: >
in$$? A
task$$B F
)$$F G
{%% 
System&& 
.&& 
DateTime&& 
now&&  #
=&&$ %
System&&& ,
.&&, -
DateTime&&- 5
.&&5 6
Now&&6 9
;&&9 :
if'' 
('' 
pair'' 
.'' 
Value'' 
.'' 
isOnTime'' '
(''' (
now''( +
)''+ ,
)'', -
{(( 
Logger)) 
.)) 
Info)) 
())  
string))  &
.))& '
Format))' -
())- .
$str)). :
,)): ;
now**  #
.**# $
ToString**$ ,
(**, -
$str**- ?
)**? @
)**@ A
)**A B
;**B C
pair++ 
.++ 
Key++ 
.++ 
Invoke++ #
(++# $
)++$ %
;++% &
Logger,, 
.,, 
Info,, 
(,,  
$str,,  A
+,,B C
pair,,D H
.,,H I
Value,,I N
.,,N O
NextRun,,O V
.,,V W
ToString,,W _
(,,_ `
),,` a
),,a b
;,,b c
}-- 
}.. 
}// 	
public00 
void00 
Stop00 
(00 
)00 
{11 	
timer22 
.22 
Stop22 
(22 
)22 
;22 
}33 	
public44 
void44 
AddTask44 
(44 
TaskDelegate44 (
d44) *
,44* +
Schedule44, 4
s445 6
)446 7
{55 	
task66 
[66 
d66 
]66 
=66 
s66 
;66 
}77 	
public88 
void88 

RemoveTask88 
(88 
TaskDelegate88 +
d88, -
)88- .
{99 	
task:: 
.:: 
Remove:: 
(:: 
d:: 
):: 
;:: 
};; 	
}<< 
}== 